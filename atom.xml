<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rerunbug.github.io</id>
    <title>Ruble</title>
    <updated>2020-11-05T06:13:25.491Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rerunbug.github.io"/>
    <link rel="self" href="https://rerunbug.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://rerunbug.github.io/images/avatar.png</logo>
    <icon>https://rerunbug.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ruble</rights>
    <entry>
        <title type="html"><![CDATA[指针]]></title>
        <id>https://rerunbug.github.io/zhi-zhen/</id>
        <link href="https://rerunbug.github.io/zhi-zhen/">
        </link>
        <updated>2020-11-04T23:53:53.000Z</updated>
        <content type="html"><![CDATA[<p><strong>我们都知道声明一个变量，就是声明一个内存空间。比如声明一个int型的变量相当于向计算机索要一块地方，能容纳4个字节的地方。而指针的作用就是“查户口”</strong>。<br>
下面我们来简单声明一下指针变量</p>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
int pointer(int*point,*u,aeve);
int main()
{
    int x=0,y=0;
    pointer(&amp;x,&amp;y);
    printf(&quot;%d %d&quot;,x,y);
}
int pointer(int*point,*u)
{
    int aver;
    aver=*point;
    *point=*u;
    *u=aver;
    return 0;
}
</code></pre>
<p><strong>需要注意的是pointer(&amp;x,&amp;y)这里用了取址运算符</strong></p>
<pre><code class="language-cpp">po=&amp;pe；
pa=*po
//相当于pa=pe这是间接赋值
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[秘密]]></title>
        <id>https://rerunbug.github.io/read-mark/</id>
        <link href="https://rerunbug.github.io/read-mark/">
        </link>
        <updated>2020-11-04T01:10:23.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>简介
<blockquote>
<p>作者：东野圭吾</p>
</blockquote>
</li>
<li>内容简介
<blockquote>
<p>平介的幸福生活在39岁那年被摧毁了。妻子带着女儿回娘家探亲，乘坐的大巴意外坠落山崖。妻子拼命护住女儿，最终伤重不治；女儿毫发未伤，但一直昏迷。妻子离世的那一刻，女儿奇迹般醒了过来。平介强忍悲痛为妻子办完葬礼，回到病房，看到女儿在熟睡，他忍不住呜咽着呼喊妻子。这时突然传来一个声音：“……公。”平介吓了一跳，却四顾无人，正疑惑时又听到了那声音：“老公，我……我在这儿。”</p>
</blockquote>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>简介
<blockquote>
<p>作者：东野圭吾</p>
</blockquote>
</li>
<li>内容简介
<blockquote>
<p>平介的幸福生活在39岁那年被摧毁了。妻子带着女儿回娘家探亲，乘坐的大巴意外坠落山崖。妻子拼命护住女儿，最终伤重不治；女儿毫发未伤，但一直昏迷。妻子离世的那一刻，女儿奇迹般醒了过来。平介强忍悲痛为妻子办完葬礼，回到病房，看到女儿在熟睡，他忍不住呜咽着呼喊妻子。这时突然传来一个声音：“……公。”平介吓了一跳，却四顾无人，正疑惑时又听到了那声音：“老公，我……我在这儿。”</p>
</blockquote>
</li>
</ul>
<!-- more -->
<ul>
<li>剧情简介
<blockquote>
<p>平介是一名汽车零件加工厂的工作人员。一年前升为了组长。因为年关将至厂里的业务各种多，导致不得不加班，直子是平介的妻子，藻奈美是平介的女儿。家乡有人去世了为了祭拜回去家乡，因为平介要加班，所以她们回去要乘坐大巴。平介在一篇报道中看的了“长野滑雪大巴坠崖事故”的大字标题，平介这时开始紧张了起来，因为长野滑雪大巴正是妻儿她们所乘坐的大巴啊，死亡名单里面就有她们。直子为了救藻奈美而牺牲了。在医院平介一直在藻奈美身边，医生说；由于母亲把他保护的很好，身上一点点伤都没有，现在不能说话很可能是因为受到惊吓的缘故。将近出院时藻奈美向爸爸说我是直子，直子的灵魂附身在了藻奈美身上。直子以藻奈美的身份活着。到了高中时期，情窦初开藻奈美继承了直子的美貌再加上在学校成绩都是排上号的。平介对与直子这种享受这种被人追求的感觉好像很乐在其中，对于在追求直子的人更是非常的讨厌了。由于平介对于藻奈美是他女儿，但是灵魂是他老婆这件事情很反感，毕竟想作却不能作的苦楚身为男人的都觉得很痛，所以平介就很限制直子的行动，甚至跟踪她。在直子心灰意冷的时候藻奈美的灵魂却是回来了。平介对于直子很抱歉，随着直子的灵魂一点点的消失，藻奈美的灵魂一点点的回来。平介的戒心慢慢的放下了。在一个钟表维修店，平介拿了之前的长野滑雪大巴的司机的遗物一个怀表去参加藻奈美的婚礼，新郎是那位司机的儿子。前几天藻奈美</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[吴晓俊是sb]]></title>
        <id>https://rerunbug.github.io/wu-xiao-jun-shi-sb/</id>
        <link href="https://rerunbug.github.io/wu-xiao-jun-shi-sb/">
        </link>
        <updated>2020-11-03T15:51:03.000Z</updated>
        <content type="html"><![CDATA[<p>吴晓俊是sb</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组]]></title>
        <id>https://rerunbug.github.io/hello-world/</id>
        <link href="https://rerunbug.github.io/hello-world/">
        </link>
        <updated>2020-11-03T15:07:16.000Z</updated>
        <content type="html"><![CDATA[<p>#数组与指针是有一种共通的关系，指针可以当数组来用，反正总的来说都是内存 内存</p>
<blockquote>
<p>首先，先声明一下数组类型</p>
</blockquote>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
#define size 4
int main()
{
    int shuzu[size]={1,2,3,4};
    int i;
    for(i=0;i&lt;size;i++){
        printf(&quot;%d&quot;,shuzu[i]);
    }
}
</code></pre>
<p><em>上面是简单的数组声明和输出。<br>
数组和for循环是才对出现的因为for循环可以访问数组和输出数组，就像花括号一样</em></p>
<p>#二维数组</p>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
#define hang 3
#define lie 4
int main()
{
            //行      列
    int erweishuzu[hang][lie]={
        {1,2,3,4},
        {5,6,7,8},
        {9,10,11,12}//三行四列
    }
    int h,l;
    for (h=0;h&lt;hang;h++){
        for(l=0;l&lt;lie;l++){
        }
    }

}
</code></pre>
<p><em>二维数组与一维数组有异曲同工之妙。看一维就要一次for循环，二维就用两次for循环最外层为行，最内层为列</em></p>
]]></content>
    </entry>
</feed>