<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rerunbug.github.io</id>
    <title>Ruble</title>
    <updated>2021-07-15T06:19:05.912Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rerunbug.github.io"/>
    <link rel="self" href="https://rerunbug.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://rerunbug.github.io/images/avatar.png</logo>
    <icon>https://rerunbug.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Ruble</rights>
    <entry>
        <title type="html"><![CDATA[【Java】泛型]]></title>
        <id>https://rerunbug.github.io/0_Ut4iRJS/</id>
        <link href="https://rerunbug.github.io/0_Ut4iRJS/">
        </link>
        <updated>2021-07-15T03:24:36.000Z</updated>
        <content type="html"><![CDATA[<p>Java中的泛型相当于c++中的template差不多于模板函数的功能<br>
这里有一个比较值得注意的是Java中有一个泛型方法</p>
<pre><code class="language-c++">
/*
 * @Author: your name
 * @Date: 2021-07-15 11:56:22
 * @LastEditTime: 2021-07-15 13:15:18
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: \java\javathink\mothdFanX.java
 */
package javathink;

class test&lt;E&gt;{
    private E t;
    public &lt;E&gt; E getT(E t){
        return t;
    }
    public &lt;E&gt; E modthtest(E a){
        System.out.println(&quot;Hello mothdClass  &quot;+a);
        return null;
    }
    // public &lt;E&gt; E showT(E t){
        
    // }
}



public class mothdFanX {
    public static void main(String[] args) {
        test &lt;Integer&gt; a=new test&lt;Integer&gt;();
        a.modthtest(31321);
        test&lt;String&gt; t=new test&lt;String&gt;();
        String es;
        es=t.getT(&quot;aaaaa&quot;);
        System.out.println(es);
        test&lt;Integer&gt; i=new test&lt;Integer&gt;();
        int ii;
        ii=i.getT(411411);
        System.out.println(ii);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Java】 彩票模拟器]]></title>
        <id>https://rerunbug.github.io/2jULWoCnw/</id>
        <link href="https://rerunbug.github.io/2jULWoCnw/">
        </link>
        <updated>2021-07-05T12:55:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
/*
 * Created by JFormDesigner on Mon Jul 05 17:54:45 CST 2021
 */


/**
 * @author Ruble
 */
public class shuangseqiu extends JFrame {


    public shuangseqiu() {
        initComponents();
    }

    private void cancelButtonActionPerformed(ActionEvent e) {
        // TODO add your code here
        System.exit(0);
    }

    private void okButtonActionPerformed(ActionEvent e) {
        // TODO add your code here
//        double ran=Math.random()*100;
//        textField10.setText(String.valueOf((int)ran));
        double[] ran = new double[7];
        for (int i = 0; i &lt; ran.length; i++) {
            ran[i] = Math.random() * (49 - 1) + 1;
        }
        textField10.setText(String.valueOf((int) ran[0]));
        textField11.setText(String.valueOf((int) ran[1]));
        textField12.setText(String.valueOf((int) ran[2]));
        textField13.setText(String.valueOf((int) ran[3]));
        textField14.setText(String.valueOf((int) ran[4]));
        textField15.setText(String.valueOf((int) ran[5]));
        textField16.setText(String.valueOf((int) ran[6]));
//        private JTextField textField17;
//        JTextField textField17;
        int[] yzhen=new int[7];
        yzhen[0]= Integer.parseInt(textField17.getText());
        yzhen[1]= Integer.parseInt(textField18.getText());
        yzhen[2]= Integer.parseInt(textField19.getText());
        yzhen[3]= Integer.parseInt(textField20.getText());
        yzhen[4]= Integer.parseInt(textField21.getText());
        yzhen[5]= Integer.parseInt(textField22.getText());
        yzhen[6]= Integer.parseInt(textField23.getText());

        if (!(yzhen[0] == ran[0] &amp;&amp; yzhen[1]==ran[1] &amp;&amp; yzhen[2]==ran[2] &amp;&amp; yzhen[3]==ran[3] &amp;&amp; yzhen[4]==ran[4] &amp;&amp; yzhen[5]==ran[5] &amp;&amp; yzhen[6]==ran[6])) {
            JOptionPane.showConfirmDialog(null,&quot;你没有中奖！！！&quot;,&quot;NOTE&quot;,0);
        }
        else {
            JOptionPane.showConfirmDialog(null,&quot;恭喜你把所有的运气都花在了这个模拟器上！！！&quot;,&quot;哈哈&quot;,0);
        }
//        for (int i = 0; i &lt; ran.length; i++) {
//
////            System.out.println((int)ran[i]);
//        }

        }

        private void helpButtonActionPerformed (ActionEvent e){
            // TODO add your code here
            JOptionPane.showConfirmDialog(null, &quot;可以让你明白为啥你买彩票中不了&quot;, &quot;哈哈&quot;, 2);
        }

        private void thisWindowClosing (WindowEvent e){
            // TODO add your code here
            System.exit(0);
        }

        private void initComponents () {
            // JFormDesigner - Component initialization - DO NOT MODIFY  //GEN-BEGIN:initComponents
            dialogPane = new JPanel();
            contentPanel = new JPanel();
            textField10 = new JTextField();
            textField11 = new JTextField();
            textField12 = new JTextField();
            textField13 = new JTextField();
            textField14 = new JTextField();
            textField15 = new JTextField();
            textField16 = new JTextField();
            textField17 = new JTextField();
            textField18 = new JTextField();
            textField19 = new JTextField();
            textField20 = new JTextField();
            textField21 = new JTextField();
            textField22 = new JTextField();
            textField23 = new JTextField();
            label1 = new JLabel();
            buttonBar = new JPanel();
            okButton = new JButton();
            helpButton = new JButton();
            cancelButton = new JButton();

            //======== this ========
            setTitle(&quot;\u5f69\u7968\u6a21\u62df\u5668&quot;);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    thisWindowClosing(e);
                }
            });
            Container contentPane = getContentPane();
            contentPane.setLayout(new BorderLayout());

            //======== dialogPane ========
            {
                dialogPane.setBorder(new EmptyBorder(12, 12, 12, 12));
                dialogPane.setLayout(new BorderLayout());

                //======== contentPanel ========
                {

                    //---- textField10 ----
                    textField10.setAutoscrolls(false);
                    textField10.setVerifyInputWhenFocusTarget(false);

                    //---- textField11 ----
                    textField11.setAutoscrolls(false);
                    textField11.setVerifyInputWhenFocusTarget(false);

                    //---- textField12 ----
                    textField12.setAutoscrolls(false);
                    textField12.setVerifyInputWhenFocusTarget(false);

                    //---- textField13 ----
                    textField13.setAutoscrolls(false);
                    textField13.setVerifyInputWhenFocusTarget(false);

                    //---- textField14 ----
                    textField14.setAutoscrolls(false);
                    textField14.setVerifyInputWhenFocusTarget(false);

                    //---- textField15 ----
                    textField15.setAutoscrolls(false);
                    textField15.setVerifyInputWhenFocusTarget(false);

                    //---- textField16 ----
                    textField16.setAutoscrolls(false);
                    textField16.setVerifyInputWhenFocusTarget(false);

                    //---- textField17 ----
                    textField17.setAutoscrolls(false);
                    textField17.setVerifyInputWhenFocusTarget(false);

                    //---- textField18 ----
                    textField18.setAutoscrolls(false);
                    textField18.setVerifyInputWhenFocusTarget(false);

                    //---- textField19 ----
                    textField19.setAutoscrolls(false);
                    textField19.setVerifyInputWhenFocusTarget(false);

                    //---- textField20 ----
                    textField20.setAutoscrolls(false);
                    textField20.setVerifyInputWhenFocusTarget(false);

                    //---- textField21 ----
                    textField21.setAutoscrolls(false);
                    textField21.setVerifyInputWhenFocusTarget(false);

                    //---- textField22 ----
                    textField22.setAutoscrolls(false);
                    textField22.setVerifyInputWhenFocusTarget(false);

                    //---- textField23 ----
                    textField23.setAutoscrolls(false);
                    textField23.setVerifyInputWhenFocusTarget(false);

                    //---- label1 ----
                    label1.setText(&quot;\u4f60\u4e70\u7684\u53f7&quot;);

                    GroupLayout contentPanelLayout = new GroupLayout(contentPanel);
                    contentPanel.setLayout(contentPanelLayout);
                    contentPanelLayout.setHorizontalGroup(
                        contentPanelLayout.createParallelGroup()
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(contentPanelLayout.createParallelGroup()
                                    .addGroup(contentPanelLayout.createSequentialGroup()
                                        .addComponent(textField10, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField11, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField12, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField13, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField14, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField15, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField16, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(contentPanelLayout.createSequentialGroup()
                                        .addGroup(contentPanelLayout.createParallelGroup()
                                            .addComponent(label1, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textField17, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField18, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField19, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField20, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField21, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField22, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField23, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(38, Short.MAX_VALUE))
                    );
                    contentPanelLayout.setVerticalGroup(
                        contentPanelLayout.createParallelGroup()
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(textField10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField11, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField12, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField13, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField14, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField15, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField16, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                                .addComponent(label1, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(textField17, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField18, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField19, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField20, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField21, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField22, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField23, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31))
                    );
                }
                dialogPane.add(contentPanel, BorderLayout.CENTER);

                //======== buttonBar ========
                {
                    buttonBar.setBorder(new EmptyBorder(12, 0, 0, 0));
                    buttonBar.setLayout(new GridBagLayout());
                    ((GridBagLayout)buttonBar.getLayout()).columnWidths = new int[] {0, 85, 85, 80};
                    ((GridBagLayout)buttonBar.getLayout()).columnWeights = new double[] {1.0, 0.0, 0.0, 0.0};

                    //---- okButton ----
                    okButton.setText(&quot;\u51fa\u53f7&quot;);
                    okButton.addActionListener(e -&gt; okButtonActionPerformed(e));
                    buttonBar.add(okButton, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0,
                        GridBagConstraints.CENTER, GridBagConstraints.BOTH,
                        new Insets(0, 0, 0, 5), 0, 0));

                    //---- helpButton ----
                    helpButton.setText(&quot;\u5173\u4e8e&quot;);
                    helpButton.addActionListener(e -&gt; helpButtonActionPerformed(e));
                    buttonBar.add(helpButton, new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0,
                        GridBagConstraints.CENTER, GridBagConstraints.BOTH,
                        new Insets(0, 0, 0, 5), 0, 0));

                    //---- cancelButton ----
                    cancelButton.setText(&quot;\u9000\u51fa&quot;);
                    cancelButton.addActionListener(e -&gt; cancelButtonActionPerformed(e));
                    buttonBar.add(cancelButton, new GridBagConstraints(3, 0, 1, 1, 0.0, 0.0,
                        GridBagConstraints.CENTER, GridBagConstraints.BOTH,
                        new Insets(0, 0, 0, 0), 0, 0));
                }
                dialogPane.add(buttonBar, BorderLayout.SOUTH);
            }
            contentPane.add(dialogPane, BorderLayout.CENTER);
            setSize(505, 295);
            setLocationRelativeTo(getOwner());
            // JFormDesigner - End of component initialization  //GEN-END:initComponents
        }

        // JFormDesigner - Variables declaration - DO NOT MODIFY  //GEN-BEGIN:variables
        private JPanel dialogPane;
        private JPanel contentPanel;
        private JTextField textField10;
        private JTextField textField11;
        private JTextField textField12;
        private JTextField textField13;
        private JTextField textField14;
        private JTextField textField15;
        private JTextField textField16;
        private JTextField textField17;
        private JTextField textField18;
        private JTextField textField19;
        private JTextField textField20;
        private JTextField textField21;
        private JTextField textField22;
        private JTextField textField23;
        private JLabel label1;
        private JPanel buttonBar;
        private JButton okButton;
        private JButton helpButton;
        private JButton cancelButton;
        // JFormDesigner - End of variables declaration  //GEN-END:variables
        public static void main (String[]args){
            new shuangseqiu().setVisible(true);
        }
    }

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java中所以事件监听器接口（总结）]]></title>
        <id>https://rerunbug.github.io/jk9k7Kn-w/</id>
        <link href="https://rerunbug.github.io/jk9k7Kn-w/">
        </link>
        <updated>2021-07-03T15:45:59.000Z</updated>
        <content type="html"><![CDATA[<p>所有事件侦听器接口必须扩展的标记接口  是     public interfaceEventListener</p>
<p>1、 public interface ActionListener extends EventListener<br>
用于接收操作事件的侦听器接口。对处理操作事件感兴趣的类可以实现此接口，而使用该类创建的对象可使用组件的 addActionListener 方法向该组件注册。在发生操作事件时，调用该对象的 actionPerformed 方法。<br>
接口中的方法：    void actionPerformed(ActionEvent e)  发生操作时调用。<br>
2、public interface AdjustmentListener extends EventListener<br>
用于接收调整事件的侦听器接口。<br>
接口中的方法：   void adjustmentValueChanged(AdjustmentEvent e） 在可调整的值发生更改时调用该方法。</p>
<p>3、public interface ComponentListener extends  EventListener<br>
用于接收组件事件的侦听器接口。对处理组件事件感兴趣的类要么实现此接口（以及它包含的所有方法），要么扩展抽象 ComponentAdapter 类（只重写感兴趣的方法）。然后，根据该类创建的侦听器对象使用组件的 addComponentListener 方法向该组件注册。当组件的大小、位置或可见性发生更改时，可调用侦听器对象中的相关方法，并将 ComponentEvent 传递给它。<br>
这些组件事件“仅”为通知目的而提供；AWT 将自动内部处理组件移动和调整大小，使 GUI 布局正常工作，而不管程序是否注册了一个 ComponentListener。<br>
接口中的方法： void componentResized(ComponentEvent e） 组件大小更改时调用。<br>
void componentMoved(ComponentEvent e) 组件位置更改时调用。<br>
void componentShown(ComponentEvent e) 组件变得可见时调用。<br>
void componentHidden(ComponentEvent e)组件变得不可见时调用。</p>
<p>4、public interface ContainerListener extends EventListener<br>
用于接收容器事件的侦听器接口。对处理容器事件感兴趣的类要么实现此接口（以及它包含的所有方法），要么扩展抽象 ContainerAdapter 类（只重写感兴趣的方法）。然后，根据该类创建的侦听器对象使用组件的 addContainerListener 方法向该组件注册。当容器的内容因为添加和移除组件而更改时，可调用侦听器对象中的相关方法，并将 ContainerEvent 传递给它。<br>
这些容器事件“仅”为通知目的而提供；AWT 将自动内部处理添加和移除操作，使程序正常工作，而不管该程序是否注册了一个 ComponentListener。<br>
接口中的方法： void componentAdded(ContainerEvent e) 已将组件添加到容器中时调用。<br>
void componentRemoved(ContainerEvent e) 已从容器中移除组件时调用。</p>
<p>5、public interface FocusListener  extends EventListener<br>
用于接收组件上的键盘焦点事件的侦听器接口。对处理焦点事件感兴趣的类要么实现此接口（以及它包含的所有方法），要么扩展抽象 FocusAdapter 类（只重写感兴趣的方法）。然后，根据该类创建的侦听器对象使用组件的 addFocusListener 方法向该组件注册。当组件获得或失去键盘焦点时，可调用侦听器对象中的相关方法，并将 FocusEvent 传递给它。<br>
接口中的方法： void focusGained(FocusEvent e) 组件获得键盘焦点时调用。<br>
void focusLost(FocusEvent e) 组件失去键盘焦点时调用。</p>
<p>6、public interface ItemListener  extends EventListener<br>
接收项事件的侦听器接口。特别适于处理项事件的类实现此接口。然后，使用组件的 addItemListener 方法向该组件注册由此类创建的对象。选定项事件发生时，调用侦听器对象的 itemStateChanged 方法。<br>
接口中的方法：void itemStateChanged(ItemEvent e)   在用户已选定或取消选定某项时调用。为此方法编写的代码将执行需要在已选定（或已取消选定）项时发生的操作。</p>
<p>7、public interface KeyListener  extends EventListener<br>
用于接收键盘事件（击键）的侦听器接口。旨在处理键盘事件的类要么实现此接口（及其包含的所有方法），要么扩展抽象 KeyAdapter 类（仅重写有用的方法）。 然后使用组件的 addKeyListener 方法将从该类所创建的侦听器对象向该组件注册。按下、释放或键入键时生成键盘事件。然后调用侦听器对象中的相关方法并将该 KeyEvent 传递给它。<br>
接口中的方法：void keyTyped(KeyEvent e)  键入某个键时调用此方法。有关键入键事件的定义，请参见 KeyEvent 的类描述。<br>
void keyPressed(KeyEvent e) 按下某个键时调用此方法。有关按下键事件的定义，请参见 KeyEvent 的类描述。<br>
void keyReleased(KeyEvent e) 释放某个键时调用此方法。有关释放键事件的定义，请参见 KeyEvent 的类描述。</p>
<p>8、public interface MenuDragMouseListener extends EventListener<br>
定义一个菜单鼠标拖动侦听器。<br>
接口中的方法： void menuDragMouseEntered(MenuDragMouseEvent e) 当拖动的鼠标进入某一菜单组件的显示区域时调用。<br>
void menuDragMouseExited(MenuDragMouseEvent e) 当拖动的鼠标离开某一菜单组件的显示区域时调用。<br>
void menuDragMouseDragged(MenuDragMouseEvent e) 当鼠标被拖动到某一菜单组件的显示区域中时调用。<br>
void menuDragMouseReleased(MenuDragMouseEvent e)当在菜单组件的显示区域中释放拖动鼠标时调用。</p>
<p>9、public interface MenuKeyListener extends EventListener<br>
接口中的方法：void menuKeyTyped(MenuKeyEvent e)   已键入某个键时调用。此事件发生在释放一个键后紧跟着按下一个键时。<br>
void menuKeyPressed(MenuKeyEvent e) 已按下某个键时调用。<br>
void menuKeyReleased(MenuKeyEvent e) 已释放某个键时调用。<br>
10、public interface MenuListener extends EventListener<br>
定义一个菜单事件侦听器。<br>
接口中的方法：void menuSelected(MenuEvent e)      选择某个菜单时调用。<br>
void menuDeselected(MenuEvent e) 取消选择某个菜单时调用。<br>
void menuCanceled(MenuEvent e) 取消菜单时调用。<br>
11、public interface MouseListener extends EventListener<br>
用于接收组件上“感兴趣”的鼠标事件（按下、释放、单击、进入或离开）的侦听器接口。（要跟踪鼠标移动和鼠标拖动，请使用 MouseMotionListener。） 旨在处理鼠标事件的类要么实现此接口（及其包含的所有方法），要么扩展抽象类 MouseAdapter（仅重写所需的方法）。 然后使用组件的 addMouseListener 方法将从该类所创建的侦听器对象向该组件注册。当按下、释放或单击（按下并释放）鼠标时会生成鼠标事件。鼠标光标进入或离开组件时也会生成鼠标事件。发生鼠标事件时，将调用该侦听器对象中的相应方法，并将 MouseEvent 传递给该方法。<br>
接口中的方法：void mouseClicked(MouseEvent e)  鼠标按键在组件上单击（按下并释放）时调用。<br>
void mousePressed(MouseEvent e) 鼠标按键在组件上按下时调用。<br>
void mouseReleased(MouseEvent e) 鼠标按钮在组件上释放时调用。<br>
void mouseEntered(MouseEvent e) 鼠标进入到组件上时调用。<br>
void mouseExited(MouseEvent e) 鼠标离开组件时调用。<br>
12、public interface MouseMotionListener extends EventListener<br>
用于接收组件上的鼠标移动事件的侦听器接口。（对于单击和其他鼠标事件，请使用 MouseListener。）旨在处理鼠标移动事件的类要么实现此接口（及其包含的所有方法），要么扩展抽象 MouseMotionAdapter 类（仅重写有用的方法）。 然后使用组件的 addMouseMotionListener 方法将从该类所创建的侦听器对象向该组件注册。移动或拖动鼠标时会生成鼠标移动事件。（将生成很多此类事件）。发生鼠标移动事件时，将调用该侦听器对象中的相应方法，并将 MouseEvent 传递给该方法。<br>
接口中的方法：<br>
void mouseDragged(MouseEvent e)<br>
鼠标按键在组件上按下并拖动时调用。在释放鼠标按键前，MOUSE_DRAGGED 事件被连续地传递到发起该拖动的组件（而不管鼠标位置是否处于该组件的边界内）。 由于拖放实现是与平台相关的，所以在本机拖放操作期间可能不传递 MOUSE_DRAGGED 事件。<br>
void mouseMoved(MouseEvent e)    鼠标光标移动到组件上但无按键按下时调用。</p>
<p>13、public interface MouseWheelListener extends EventListener<br>
用于接收组件上的鼠标滚轮事件的侦听器接口。（对于单击和其他鼠标事件，请使用 MouseListener。对于鼠标移动和拖动，请使用 MouseMotionListener。） 旨在处理鼠标滚轮事件的类实现此接口（及其包含的所有方法）。 然后使用组件的 addMouseWheelListener 方法将从该类所创建的侦听器对象向该组件注册。旋转鼠标滚轮时生成鼠标滚轮事件。发生鼠标滚轮事件时，将调用对象的 mouseWheelMoved 方法。<br>
接口中的方法： void mouseWheelMoved(MouseWheelEvent e)   鼠标滚轮旋转时调用。<br>
14、public interface TextListener extends EventListener<br>
用于接收文本事件的侦听器接口。 旨在处理文本事件的类实现此接口。然后使用组件的 addTextListener 方法将从该类所创建的对象向该组件注册。当组件的文本改变时，将调用侦听器对象的 textValueChanged 方法。<br>
接口中的方法： void textValueChanged(TextEvent e)   文本的值已改变时调用。为此方法所编写的代码在文本改变时执行所需的操作。<br>
15、public interface WindowFocusListener  extends EventListener<br>
用于接收 WindowEvent（包括 WINDOW_GAINED_FOCUS 和 WINDOW_LOST_FOCUS 事件）的侦听器接口。旨在处理 WindowEvent 的类要么实现此接口（及其包含的所有方法），要么扩展抽象 WindowAdapter 类（仅重写所需的方法）。然后使用 Window 的 addWindowFocusListener 方法将从该类所创建的侦听器对象向该 Window 注册。当通过打开、关闭、激活、停用、图标化或取消图标化，或者通过将焦点移入或移出 Window 而使该 Window 的状态改变时，将调用侦听器对象中的相关方法，并将 WindowEvent 传递给该方法。<br>
接口中的方法：<br>
void windowGainedFocus(WindowEvent e)<br>
该 Window 被设置为聚焦 Window 时调用，聚焦 Window 意味着该 Window 或其某个子组件将接收键盘事件。<br>
void windowLostFocus(WindowEvent e)<br>
该 Window 不再是聚焦 Window 时调用，不再是聚焦 Window 意味着不再传递键盘事件到该 Window 或其任意子组件。</p>
<p>16、public interface WindowListener extends EventListener<br>
用于接收窗口事件的侦听器接口。旨在处理窗口事件的类要么实现此接口（及其包含的所有方法），要么扩展抽象类 WindowAdapter（仅重写所需的方法）。然后使用窗口的 addWindowListener 方法将从该类所创建的侦听器对象向该 Window 注册。当通过打开、关闭、激活或停用、图标化或取消图标化而改变了窗口状态时，将调用该侦听器对象中的相关方法，并将 WindowEvent 传递给该方法。<br>
接口中的方法：<br>
void windowOpened(WindowEvent e)  窗口首次变为可见时调用。<br>
void windowClosing(WindowEvent e) 用户试图从窗口的系统菜单中关闭窗口时调用。<br>
void windowClosed(WindowEvent e) 因对窗口调用 dispose 而将其关闭时调用。<br>
void windowIconified(WindowEvent e) 窗口从正常状态变为最小化状态时调用。对于很多平台而言，已最小化的窗口将显示为窗口 iconImage 属性中所指定的图标。<br>
void windowDeiconified(WindowEvent e) 窗口从最小化状态变为正常状态时调用。<br>
void windowActivated(WindowEvent e) 将 Window 设置为活动 Window 时调用。只有框架或对话框可以成为活动 Window。本机的窗口系统可能使用特殊装饰表示活动 Window 或其子窗口，如高亮显示标题栏。活动 Window 要么是聚焦 Window，要么是作为聚焦 Window 所有者的第一个 Frame 或 Dialog。<br>
void windowDeactivated(WindowEvent e)  当 Window 不再是活动 Window 时调用。只有框架或对话框可以成为活动 Window。本机的窗口操作系统可能使用特殊装饰表示活动 Window 或其子窗口，如高亮显示标题栏。活动 Window 要么是聚焦 Window，要么是作为聚焦 Window 所有者的第一个 Frame 或 Dialog。<br>
17、public interface WindowStateListener extends EventListener<br>
用于接收窗口状态事件的侦听器接口。 旨在处理窗口状态事件的类要么实现此接口（及其包含的所有方法），要么扩展抽象 WindowAdapter 类（仅重写所需的方法）。 然后使用 Window 的 addWindowStateListener 方法将从该类所创建的侦听器对象向该 Window 注册。当通过图标化、最大化等改变窗口状态时，就调用侦听器对象中的 windowStateChanged 方法，并将 WindowEvent 传递给该方法。<br>
接口中的方法：<br>
void windowStateChanged(WindowEvent e)窗口状态改变时调用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[swing(Java)]]></title>
        <id>https://rerunbug.github.io/21mnGmFrR/</id>
        <link href="https://rerunbug.github.io/21mnGmFrR/">
        </link>
        <updated>2021-07-02T13:26:32.000Z</updated>
        <content type="html"><![CDATA[<p>鼠标事件：<br>
mouseReleased //鼠标释放事件<br>
mousePressed  // 鼠标按下事件<br>
mouseExited     //鼠标退出<br>
mouseEntered  //鼠标进入<br>
mouseClicked   //鼠标点击</p>
<pre><code class="language-java">
				int btn = e.getButton();// 获取用户点击的是哪个键
				switch (btn) {
				case MouseEvent.BUTTON1: {// 鼠标左键
					textArea.append(&quot;点击了鼠标左键\n&quot;);
					break;
				}
				case MouseEvent.BUTTON2: {// 鼠标滚轮键
					textArea.append(&quot;点击了鼠标滚轮键\n&quot;);
					break;
				}
				case MouseEvent.BUTTON3: {// 鼠标右键
					textArea.append(&quot;点击了鼠标右键\n&quot;);
					break;


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[poplay直播源]]></title>
        <id>https://rerunbug.github.io/t_0qzRAKS/</id>
        <link href="https://rerunbug.github.io/t_0qzRAKS/">
        </link>
        <updated>2021-06-30T07:47:32.000Z</updated>
        <content type="html"><![CDATA[<p>https://iptv-org.github.io/iptv/index.m3u</p>
<p>https://github.com/imDazui/Tvlist-awesome-m3u-m3u8#%E6%8F%92%E4%BB%B6</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Java中方法中的形参为类的问题]]></title>
        <id>https://rerunbug.github.io/_nxRvZmyc/</id>
        <link href="https://rerunbug.github.io/_nxRvZmyc/">
        </link>
        <updated>2021-06-26T13:50:05.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">import java.util.*;

class Circle2D{
    private double x, y,radius;
    public void getLocation(double x, double y){
        this.x = x;
        this.y = y;
    }
    public void getRadius(double r){
        radius=r;
    }
    Circle2D(){
        this.x = 0;
        this.y = 0;
        this.radius =1;
    }
    Circle2D(double x, double y,double radius){
        this.x = x;
        this.y = y;
        this.radius = radius;
        // System.out.println(&quot;The area is &quot;+getArea());
        // System.out.println(&quot;The perimeter is &quot;+getPerimeter());
    }
    public double getArea(){
        return Math.PI*Math.pow(this.radius, 2);
    }
    public double getPerimeter(){
        return Math.PI*this.radius*2;
    }
    public boolean contains(double M,double N){
        if((Math.pow(M-this.x,2)+Math.pow(N-this.y,2))&gt;Math.pow(this.radius, 2)){
            return true;
        }
        else
        return false;
    }
    // 两圆之间内切 d=r1-r2
    // 两圆之间内含 d&lt;r1-r2
    // d 为两圆圆心的坐标应用两点间的距离公式
    public boolean contains(Circle2D circle) {
        return Math.pow((circle.x-this.x),2)+Math.pow((circle.y-this.y),2)&lt;=Math.abs(circle.radius-this.radius);
        //d&lt;=R-r;
    }
    public boolean overlaps(Circle2D circle) {
        return Math.pow((circle.x-this.x),2)+Math.pow((circle.y-this.y),2)&gt;Math.abs(circle.radius-this.radius)&amp;&amp;Math.pow((circle.x-this.x),2)+Math.pow((circle.y-this.y),2)&lt;circle.radius+this.radius;
        //R-r&lt;d&lt;R+r
    }
} 

public class Circle2DTest {
    static Circle2D cl=new Circle2D();
    private static void cl(Circle2D circle2d) {
        System.out.println(&quot;The area is &quot;+circle2d.getArea());
        System.out.println(&quot;The perimeter is &quot;+circle2d.getPerimeter());
    }
    
    public static void main(String[] args) {
        cl(new Circle2D(2,2,5.5));
        System.out.println(&quot;The points contains is &quot;+cl.contains(3,3));
        System.out.println(&quot;The circle contains is &quot;+cl.contains(new Circle2D(4,5,10.5)));
        System.out.println(&quot;The circle contains is &quot;+cl.contains(new Circle2D(3,5,2.3)));
    }
}
</code></pre>
<p>注意Circle2DTest类中的方法cl，形参为Circle2D circle2d 如果想要调用其类中的成员变量和方法必须得<strong>变量名.方法</strong>，我们可以把该形参看做（数据类型 变量名）的命名方式。</p>
<p>如果不这样做会导致该方法使用默认值来返回一个一个数值</p>
<p>错误案例</p>
<pre><code class="language-java">public class Circle2DTest {
    static Circle2D cl=new Circle2D();
    private static void cl(Circle2D circle2d) {
        System.out.println(&quot;The area is &quot;+cl.getArea());
        System.out.println(&quot;The perimeter is &quot;+cl.getPerimeter());
    }
    
    public static void main(String[] args) {
        cl(new Circle2D(2,2,5.5));
        System.out.println(&quot;The points contains is &quot;+cl.contains(3,3));
        System.out.println(&quot;The circle contains is &quot;+cl.contains(new Circle2D(4,5,10.5)));
        System.out.println(&quot;The circle contains is &quot;+cl.contains(new Circle2D(3,5,2.3)));
    }
}
</code></pre>
<p>如果这样子就会引用到Circle2D类中的方法Circle2D的无参构造了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[追风筝的人]]></title>
        <id>https://rerunbug.github.io/6JWVqqmzH/</id>
        <link href="https://rerunbug.github.io/6JWVqqmzH/">
        </link>
        <updated>2020-12-06T13:57:51.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://rerunbug.github.io/post-images/1607263132678.jpg" alt="" loading="lazy"><br>
作者：[美] 卡勒德·胡赛尼<br>
对于这本书我想说，它更像是在讲述一个真实且就好像是发生在身边是事情那样。这本书给我的力量绝非一般而是很大。时间真的可以将过去的种种冲淡吗？还是我们不愿意去面对，而选择去逃避。而真正的勇士是敢于面对生活的惨淡，敢于正视淋漓的鲜血。勇士是敢于知道这个世界的真相之后还敢于直面生活的人。<br>
阿富汗的少爷阿米尔和其仆人哈桑。在童年时，哈桑是一个放风筝的天才，至于掉落的风筝他都能准确无误的预判到风筝掉落的地方，在阿米尔问他是怎么知道的，哈桑又反问少爷：“我有骗过你吗？<font color="red">为你，千千万万遍。</font>看到这里我就回想到了小时候也曾经有过这一段真挚的友情。<font color="red">为你，千千万万遍。</font>这句话在一个未经世事的儿童口中说出来我认为此子将来在肯定是一个很重情谊的人，是一个很值得交的朋友，但是在社会上很容易吃亏的人。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[哥儿]]></title>
        <id>https://rerunbug.github.io/KXm_pk_us/</id>
        <link href="https://rerunbug.github.io/KXm_pk_us/">
        </link>
        <updated>2020-11-25T02:17:49.000Z</updated>
        <content type="html"><![CDATA[<p><strong>作者：夏目漱石</strong><br>
<img src="https://rerunbug.github.io/post-images/1606270829037.jpg" alt="" loading="lazy"><br>
我第次看夏目漱石的作品是《心》讲述的是一个孤独患者的故事。现在忘记的差不多了。<br>
《哥儿》中的少爷的原型是 弘中又一，少爷是一个作事仅凭个人感觉做事的人，正如清婆<br>
说的“少爷您善良，正义”少爷在我们中国古代就有一种侠客的风范，少爷在物理学院毕业<br>
后就远离了东京去了一个偏僻的地方教书了，在哪里遇见了“红衬衫”，”豪猪“，”蹩脚帮“<br>
，&quot;狗瓘”。少爷起初还以为“豪猪”是坏人结果是“红衬衫”“蹩脚帮”才是坏人第一点挑唆<br>
学生去我的蚊帐里面放蚂蚱，在去“红衬衫”家吃饭下套让我们去劝架，结果诱导报社写我们去<br>
打架了。反而“红衬衫”整天把为人师表，要严于律己，身为老师要起带头作用。“豪猪”与少爷<br>
都是不懂如何在人世中圆滑出世的”侠客“少爷就是一种被别人卖了还在为别人数钱的人。”蹩脚帮“<br>
与”红衬衫“狼狈为奸。而”狗瓘“作为校长却无作为。少爷与”豪猪“采用了比较侠客的方法报复<br>
了回去，在妓院的门口蹲点等他们出现打了一顿，又以侠客的方式声明我就在旅馆等他们报警啥的，<br>
仿佛就像告诉他你要来报复我，我随时恭候的到来。<br>
这篇小说通篇看下来毫无压力看完后还有点爽，我内心也住着个侠客，但是如果在现代为人不圆滑就会成为别人砧板上的鱼肉，少爷与”豪猪“他们虽然成功了，但是也失去了教师的工作，少爷从40元/月的工作去到了25元/月的工作而且还很辛苦，写到这里我想到了一个很中二的台词：”错的不是我，而是这个世界“在文章的结尾夏目漱石还写了一段关于清婆的事情清婆死与肝炎，缺少清婆的少爷如何在这个两面三刀的世界上活着，在往后的几年里少爷是否还能保持初心呢？是否成为了与这个世界同流合污的那一类人呢？现在问题仿佛就像是在问读者。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[冒泡排序法]]></title>
        <id>https://rerunbug.github.io/tQVI77KYT/</id>
        <link href="https://rerunbug.github.io/tQVI77KYT/">
        </link>
        <updated>2020-11-14T15:17:53.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://rerunbug.github.io/post-images/1605367181856.png" alt="" loading="lazy"><br>
<img src="https://rerunbug.github.io/post-images/1605367188199.png" alt="" loading="lazy"></p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
int bubbleSort(int a[], int N) {
	int sw = 0;
	bool flag = 1;
	for (int i = 0; flag; i++) {
		flag = 0;
		for (int j = N - 1; j &gt;= i + 1; j--) {
			//大于为降序，小于为升序。
			if (a[j] &lt; a[j - 1]) {
				//交换相邻元素      这里也可以用指针来表示
				swap(a[j], a[j - 1]);//int *temp;
				flag = 1;               //*temp=a[j];
				sw++;                  //a[j]=a[j-1];
			}                               //a[j-1]=*temp;
		}
	}
	return sw;
}
int main()
{
	int a[100], n, sw;
	cin &gt;&gt; n;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; a[i];
	}
	sw = bubbleSort(a, n);
	for (int i = 0; i &lt; n; i++) {
		if (i)cout &lt;&lt; &quot; &quot;;
		cout &lt;&lt; a[i];
	}
	cout &lt;&lt; endl;
	cout &lt;&lt; sw &lt;&lt; endl;
	return 0;
}
</code></pre>
<p>冒泡排序法用c++比较方便一些<br>
可以看到作比较的函数是数组的最后一个与倒数第二个<br>
作比较的（众所周知3个数组里面所分配的空间命名为<br>
a[0],a[1],a[2]是从0到n-1个数来分配内存空间的）如果<br>
大于就将他们的值交换。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插入排序法]]></title>
        <id>https://rerunbug.github.io/RQJCmKtJJ/</id>
        <link href="https://rerunbug.github.io/RQJCmKtJJ/">
        </link>
        <updated>2020-11-14T15:05:47.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://rerunbug.github.io/post-images/1605366613526.png" alt="" loading="lazy"><br>
<img src="https://rerunbug.github.io/post-images/1605366622087.png" alt="" loading="lazy"></p>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
//按顺序输出数组元素
void trace(int A[], int N)
{
	int i;
	for (i = 0; i &lt; N; i++) {
		if (i &gt; 0)printf(&quot; &quot;);//在相邻元素之间输出1个空格
		printf(&quot;%d&quot;, A[i]);
	}
	printf(&quot;\n&quot;);
}
//插入排序（0起点数组）
void insertionSort(int A[], int N) {
	int j, i, v;
	for (i = 1; i &lt; N; i++) {
		v = A[i];
		j = i - 1;
		while (j &gt;= 0 &amp;&amp; A[j] &gt; v) {
			A[j + 1] = A[j];
			j--;
		}
		A[j + 1] = v;
		trace(A, N);
	}
}
int main() {
	int N, i;
	int A[100];
	scanf_s(&quot;%d&quot;, &amp;N);
	for (i = 0; i &lt; N; i++)scanf_s(&quot;%d&quot;, &amp;A[i]);
	trace(A, N);
	insertionSort(A, N);
	return 0;
}
</code></pre>
<p>第一次循环a[0]和a[1]作对比如果a[0]大于等于0并且大于a[1]<br>
就把a[0]的值与a[1]的值交换。</p>
]]></content>
    </entry>
</feed>