<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rerunbug.github.io</id>
    <title>Ruble</title>
    <updated>2020-11-08T07:33:16.351Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rerunbug.github.io"/>
    <link rel="self" href="https://rerunbug.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://rerunbug.github.io/images/avatar.png</logo>
    <icon>https://rerunbug.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ruble</rights>
    <entry>
        <title type="html"><![CDATA[ESP定律]]></title>
        <id>https://rerunbug.github.io/aREf_pDTx/</id>
        <link href="https://rerunbug.github.io/aREf_pDTx/">
        </link>
        <updated>2020-11-08T06:56:27.000Z</updated>
        <content type="html"><![CDATA[<p><font color="red">ESP定律又名堆栈平衡定律。</font><br>
<strong>典型的壳有UPX壳</strong><br>
<img src="https://rerunbug.github.io/post-images/1604819295812.jpg" alt="" loading="lazy"><br>
pushad是一个很典型的入栈代码<br>
我们在这里F8一下注意寄存器的ESP那边，只有ESP那边标红了<br>
<img src="https://rerunbug.github.io/post-images/1604819553832.jpg" alt="" loading="lazy"><br>
然后我们在红字部分转到内存部分<br>
在第一个字节下一个硬件访问断点4字节<br>
然后F9来到<br>
<img src="https://rerunbug.github.io/post-images/1604819891609.jpg" alt="" loading="lazy"><br>
看到0046DE7C这里的jmp是一个大跳转F8过去就来到了<br>
OEP<br>
<img src="https://rerunbug.github.io/post-images/1604820089795.jpg" alt="" loading="lazy"><br>
因为这只是一个压缩壳，所以他没有加密IAT直接脱就好了<br>
这里我们用dbg自带的插件来脱<br>
按ctrl+i<br>
<img src="https://rerunbug.github.io/post-images/1604820279590.jpg" alt="" loading="lazy"><br>
OEP自动填写上去了<br>
之后我们按IAT Autosearch按钮之后VA和SIZE的数据也会帮我们填上去了<br>
然后按Get Imports后我们可以看到表格里面列有很多数据<br>
我们把打<font color="red">×</font>的数据按鼠标右键Delte tree node删除即可<br>
然后按Dump按钮会得到一个exe文件，注意这个无法打开的我们还需要Fix Dump文件<br>
按下这个按钮选择我们刚刚得到的Dump文件即可运行了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[子序列的和（subsequence）]]></title>
        <id>https://rerunbug.github.io/xdJMwwQ9W/</id>
        <link href="https://rerunbug.github.io/xdJMwwQ9W/">
        </link>
        <updated>2020-11-07T10:24:27.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://rerunbug.github.io/post-images/1604744763984.jpg" alt="" loading="lazy"></figure>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
double c;
int main()
{
	long long int n, m,a,j=1;
	while (scanf_s(&quot;%lld %lld&quot;, &amp;n, &amp;m) !=EOF)
	{
		if (n == 0 &amp;&amp; m == 0)break;
		for (a=n; a &lt;= m; a++)
		{
			c +=1.0/(a*a);
		}
		printf(&quot;Case %d:&quot;, j++);
		printf(&quot;%.5lf\n&quot;, c);
	}
	return 0;
}
</code></pre>
<p><strong>在c+=1.0/(a*a)这里我也中了坑，c语言里面int/int 得到的是int型的数据，而int/float类型的数据就会强制转化为int型的数据。只有float/float才会为有小数的值</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水仙花数（daffodil）]]></title>
        <id>https://rerunbug.github.io/1sX5M7cRx/</id>
        <link href="https://rerunbug.github.io/1sX5M7cRx/">
        </link>
        <updated>2020-11-07T07:40:04.000Z</updated>
        <content type="html"><![CDATA[<p><strong>输出 100~999 中的所有水仙花数。若 3 位数 ABC 满足 ABC=A3+B3+C3，则称其为水仙<br>
花数。例如 153=13+53+33，所以 153 是水仙花数</strong></p>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
const int max = 999;
int main()
{
	for (int min = 100; min &lt;= max; min++) {
		int a = min / 100;//百分位
		int b = (min % 100) / 10;//十分位
		int c = min % 10;//个分位
		if ((a * a * a) + (b * b * b) + (c * c * c))printf(&quot;%d\n&quot;, min);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[后翼弃兵 The Queen's Gambit]]></title>
        <id>https://rerunbug.github.io/PM85vW1Lf/</id>
        <link href="https://rerunbug.github.io/PM85vW1Lf/">
        </link>
        <updated>2020-11-05T14:47:39.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://rerunbug.github.io/post-images/1604587726375.jpg" alt="" loading="lazy"><br>
<a href="https://movie.douban.com/subject/32579283/?tag=%E7%83%AD%E9%97%A8&amp;from=gaia">豆瓣直达</a><br>
<strong>Netflix出品必属精品</strong><br>
由于博主也不懂国际象棋所以我尽量不讲国际象棋有关。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[指针]]></title>
        <id>https://rerunbug.github.io/zhi-zhen/</id>
        <link href="https://rerunbug.github.io/zhi-zhen/">
        </link>
        <updated>2020-11-04T23:53:53.000Z</updated>
        <content type="html"><![CDATA[<p><strong>我们都知道声明一个变量，就是声明一个内存空间。比如声明一个int型的变量相当于向计算机索要一块地方，能容纳4个字节的地方。而指针的作用就是“查户口”</strong>。<br>
下面我们来简单声明一下指针变量</p>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
int pointer(int*point,*u,aeve);
int main()
{
    int x=0,y=0;
    pointer(&amp;x,&amp;y);
    printf(&quot;%d %d&quot;,x,y);
}
int pointer(int*point,*u)
{
    int aver;
    aver=*point;
    *point=*u;
    *u=aver;
    return 0;
}
</code></pre>
<p><strong>需要注意的是pointer(&amp;x,&amp;y)这里用了取址运算符</strong></p>
<pre><code class="language-cpp">po=&amp;pe；
pa=*po
//相当于pa=pe这是间接赋值
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[秘密]]></title>
        <id>https://rerunbug.github.io/read-mark/</id>
        <link href="https://rerunbug.github.io/read-mark/">
        </link>
        <updated>2020-11-04T01:10:23.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>简介
<blockquote>
<p>作者：东野圭吾</p>
</blockquote>
</li>
<li>内容简介
<blockquote>
<p>平介的幸福生活在39岁那年被摧毁了。妻子带着女儿回娘家探亲，乘坐的大巴意外坠落山崖。妻子拼命护住女儿，最终伤重不治；女儿毫发未伤，但一直昏迷。妻子离世的那一刻，女儿奇迹般醒了过来。平介强忍悲痛为妻子办完葬礼，回到病房，看到女儿在熟睡，他忍不住呜咽着呼喊妻子。这时突然传来一个声音：“……公。”平介吓了一跳，却四顾无人，正疑惑时又听到了那声音：“老公，我……我在这儿。”<br>
<img src="https://rerunbug.github.io/post-images/1604581564657.jpg" alt="" loading="lazy"></p>
</blockquote>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>简介
<blockquote>
<p>作者：东野圭吾</p>
</blockquote>
</li>
<li>内容简介
<blockquote>
<p>平介的幸福生活在39岁那年被摧毁了。妻子带着女儿回娘家探亲，乘坐的大巴意外坠落山崖。妻子拼命护住女儿，最终伤重不治；女儿毫发未伤，但一直昏迷。妻子离世的那一刻，女儿奇迹般醒了过来。平介强忍悲痛为妻子办完葬礼，回到病房，看到女儿在熟睡，他忍不住呜咽着呼喊妻子。这时突然传来一个声音：“……公。”平介吓了一跳，却四顾无人，正疑惑时又听到了那声音：“老公，我……我在这儿。”<br>
<img src="https://rerunbug.github.io/post-images/1604581564657.jpg" alt="" loading="lazy"></p>
</blockquote>
</li>
</ul>
<!-- more -->
<ul>
<li>剧情简介
<blockquote>
<p>平介是一名汽车零件加工厂的工作人员。一年前升为了组长。因为年关将至厂里的业务各种多，导致不得不加班，直子是平介的妻子，藻奈美是平介的女儿。家乡有人去世了为了祭拜回去家乡，因为平介要加班，所以她们回去要乘坐大巴。平介在一篇报道中看的了“长野滑雪大巴坠崖事故”的大字标题，平介这时开始紧张了起来，因为长野滑雪大巴正是妻儿她们所乘坐的大巴啊，死亡名单里面就有她们。直子为了救藻奈美而牺牲了。在医院平介一直在藻奈美身边，医生说；由于母亲把他保护的很好，身上一点点伤都没有，现在不能说话很可能是因为受到惊吓的缘故。将近出院时藻奈美向爸爸说我是直子，直子的灵魂附身在了藻奈美身上。直子以藻奈美的身份活着。到了高中时期，情窦初开藻奈美继承了直子的美貌再加上在学校成绩都是排上号的。平介对与直子这种享受这种被人追求的感觉好像很乐在其中，对于在追求直子的人更是非常的讨厌了。由于平介对于藻奈美是他女儿，但是灵魂是他老婆这件事情很反感，毕竟想作却不能作的苦楚身为男人的都觉得很痛，所以平介就很限制直子的行动，甚至跟踪她。在直子心灰意冷的时候藻奈美的灵魂却是回来了。平介对于直子很抱歉，随着直子的灵魂一点点的消失，藻奈美的灵魂一点点的回来。平介的戒心慢慢的放下了。在一个钟表维修店，平介拿了之前的长野滑雪大巴的司机的遗物一个怀表去参加藻奈美的婚礼，新郎是那位司机的儿子。前几天藻奈美拿了妈妈出嫁时爸爸送的那枚戒指去维修店重新打造了一番。而平介拿的也是遗物双方都是遗物在婚礼现场似乎很不妙。平介顿时惊讶了，因为戒指就藏在泰迪熊上这个是平介与直子的秘密，就算直子告诉了藻奈美，她也想人妈妈看她的婚礼，但是完全没有必要重新搞过一遍啊。只有一个可能了，直子还活着，九年来她都在演戏，演直子慢慢消失的戏。平介不敢相信，他想的结果他立马跑去了婚礼现场去看看直子的反应、表情。原文中；<u>爸爸，她说，这么长时间以来，真的是好长好长时间以来，多亏您的照顾....她的声音已经哽咽了。</u><br>
<strong>读书笔记</strong><br>
<font color="bule">正所谓一千个读者就有一千个哈姆雷特</font>这里的想法就属于个人的愚见仅供参考。<br>
<font color="green">秘密</font>在百度百科中的解释释义：<font color="bule">1、指有所隐蔽，不为人知；2、隐蔽不为人知的事情或事物；3、佛教指隐秘深奥之法。4、隐蔽；不让人知道的。亦指隐蔽不让人知道的事情。</font>这本是叫《秘密》很显然这里是指第1，2，4的意思了，结合本书的平介与藻奈美和直子，他们之间必有一个或者全部都有隐瞒的事情，藻奈美为了安慰父亲失去妻子痛自己也不相信妈妈为了保护她而死去了。在极强的压力下出现了直子的人格。平介也可能知道藻奈美是在骗他，但是他也愿意深陷其中。这件事是他们三个人之间秘密。<br>
另外这本小说还有一个矛点，直子在见了文也（新郎）之后九里都没见过面了，第一次见面是在他们家里一起吃饭的时候就看了一眼迟疑了一下，在之前的剧情里直子对于司机家还是有点怀恨的，况且我不相信这个世界上有一见钟情的说法，一见钟情的背后必有极大的阴谋，直子嫁过去很可能是报复他的<br>
又或者是真的是为了在创造藻奈美的人出现，毕竟平介的生命是有限的，他们的秘密在平介死后的时间，没人会相信他们的秘密了，如果直子一直以这种状态下去很可能会怀恨一辈子</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[吴晓俊是sb]]></title>
        <id>https://rerunbug.github.io/wu-xiao-jun-shi-sb/</id>
        <link href="https://rerunbug.github.io/wu-xiao-jun-shi-sb/">
        </link>
        <updated>2020-11-03T15:51:03.000Z</updated>
        <content type="html"><![CDATA[<p>吴晓俊是sb</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组]]></title>
        <id>https://rerunbug.github.io/hello-world/</id>
        <link href="https://rerunbug.github.io/hello-world/">
        </link>
        <updated>2020-11-03T15:07:16.000Z</updated>
        <content type="html"><![CDATA[<p>#数组与指针是有一种共通的关系，指针可以当数组来用，反正总的来说都是内存 内存</p>
<blockquote>
<p>首先，先声明一下数组类型</p>
</blockquote>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
#define size 4
int main()
{
    int shuzu[size]={1,2,3,4};
    int i;
    for(i=0;i&lt;size;i++){
        printf(&quot;%d&quot;,shuzu[i]);
    }
}
</code></pre>
<p><em>上面是简单的数组声明和输出。<br>
数组和for循环是才对出现的因为for循环可以访问数组和输出数组，就像花括号一样</em></p>
<p>#二维数组</p>
<pre><code class="language-cpp">#include&lt;stdio.h&gt;
#define hang 3
#define lie 4
int main()
{
            //行      列
    int erweishuzu[hang][lie]={
        {1,2,3,4},
        {5,6,7,8},
        {9,10,11,12}//三行四列
    }
    int h,l;
    for (h=0;h&lt;hang;h++){
        for(l=0;l&lt;lie;l++){
        }
    }

}
</code></pre>
<p><em>二维数组与一维数组有异曲同工之妙。看一维就要一次for循环，二维就用两次for循环最外层为行，最内层为列</em></p>
]]></content>
    </entry>
</feed>